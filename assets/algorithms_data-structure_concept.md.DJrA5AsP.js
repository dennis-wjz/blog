import{_ as t,c as o,o as r,a4 as a}from"./chunks/framework.BxgpPnKs.js";const u=JSON.parse('{"title":"算法概念","description":"","frontmatter":{"title":"算法概念","customTag":"algorithms>数据结构","date":"2024.06.24","editLink":true},"headers":[],"relativePath":"algorithms/data-structure/concept.md","filePath":"algorithms/data-structure/concept.md","lastUpdated":1719219942000}'),e={name:"algorithms/data-structure/concept.md"},s=a('<h1 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h1><p>一般来讲，主要可以从两个维度来进行分类：</p><h2 id="逻辑结构" tabindex="-1">逻辑结构 <a class="header-anchor" href="#逻辑结构" aria-label="Permalink to &quot;逻辑结构&quot;">​</a></h2><p>逻辑结构揭示了数据元素之间的逻辑关系，区分为<strong>线性结构</strong>和<strong>非线性结构</strong></p><ul><li><p><strong>线性结构</strong>：数组、链表、栈、队列、<code>哈希表</code></p></li><li><p><strong>非线性结构</strong>：树、图、堆、<code>哈希表</code></p><p>非线性结构又可再进一步细分为<strong>树形结构</strong>和<strong>网状结构</strong></p><ul><li><strong>树形结构</strong>（一对多）：树、堆、哈希表</li><li><strong>网状结构</strong>（多对多）：图</li></ul></li></ul><h2 id="物理结构" tabindex="-1">物理结构 <a class="header-anchor" href="#物理结构" aria-label="Permalink to &quot;物理结构&quot;">​</a></h2><p>物理结构主要可以分为<strong>连续</strong>与<strong>分散</strong>，算法中比较重要的一个概念，数据都主要存储在内存中，所以对内存的分配便显的极为重要</p><p>典型的有：<strong>数组的内存空间是连续的</strong>，<strong>链表的内存空间是分散的</strong></p>',8),n=[s];function c(i,l,d,g,p,_){return r(),o("div",null,n)}const m=t(e,[["render",c]]);export{u as __pageData,m as default};
